import { Component } from '@angular/core';
import { IInventoryInTrxHeader } from '../../classes/inventory-management/InventoryIn/IInventoryInTrxHeader.interface';
import { IInventoryInTrxHeaderClass } from '../../classes/inventory-management/InventoryIn/IInventoryInTrxHeaderClass';
import { FormGroup, FormBuilder} from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { InventoryInService } from '../../services/InventoryIn.service';
import { DatePipe } from '@angular/common';
import { ISupplier } from '../../classes/data-dictionary/Supplier/ISupplier.interface';
import { IiTemMaster } from '../../classes/data-dictionary/ItemMaster/IitemMaster.interface';
import { IUnitCode } from '../../classes/data-dictionary/UnitCode/IUnitCode.interface';
import { IInventoryInTrxDetail } from '../../classes/inventory-management/InventoryIn/IInventoryInTrxDetail.interface';
import { IInventoryInTrxDetailClass } from '../../classes/inventory-management/InventoryIn/IInventoryInTrxDetailClass';
import { IiTemMasterUnitJoinUnit } from '../../classes/data-dictionary/ItemMasterUnit/IitemMasterUnitJoinUnit.interface';
import { IitemMasterUnitJoinUnitClass } from '../../classes/data-dictionary/ItemMasterUnit/IitemMasterJoinUnitClass';
import { UserAuthorizationService } from '../../services/UserAuthorization.service';
import * as XLSX from 'xlsx';
import { CookieService } from 'ngx-cookie-service';


@Component({
  selector: 'app-inventory-in',
  templateUrl: './inventory-in.component.html'
 
})

export class InventoryInComponent {
  userIDLogin: string;
  excelUpload: ExcelUploadTable[] = [];
  arrayBuffer: any;
  user: string;
  iinv_in_trx_hdr: IInventoryInTrxHeader = new IInventoryInTrxHeaderClass();
  iinv_in_trx_dtl: IInventoryInTrxDetail = new IInventoryInTrxDetailClass();
  addInventoryInFormGroup: FormGroup;
  addInventoryInFormGroupByBatch: FormGroup;
  trxDate: Date;
  Isupplier: ISupplier[];
  supplierSelectList = [];
  itemasterSelectList = [];
  itemmasteunitSelectList = [];
  Iitemmaster: IiTemMaster[];
  Iunitcode: IUnitCode[];
  ItemMasterUnitArray: IiTemMasterUnitJoinUnit[];
  ItemMasterUnitArray_convfactor: IiTemMasterUnitJoinUnit[];
  ItemMasterUnitArray_convfactor_Arr: IitemMasterUnitJoinUnitClass[] = new Array();
  conversionFactor: number;

  isReadonly_UC: boolean;
  isReadonly_QTY: boolean;
  isReadonly_LookUp_Btn_ItemUnit: boolean;

  itemmasterId_doc: string;
  itemmasterUnit_doc: string;
 
  trxNumFunction: string;
  fileName = 'ExcelSheet.xlsx';
  constructor(public inv_in_service: InventoryInService, public cookieService: CookieService,public toastr: ToastrService, public builder: FormBuilder, public auth: UserAuthorizationService,
    public datepipe: DatePipe) {
    this.CreateForm();
     
  }
  ngOnInit() {
    this.addInventoryInFormGroupByBatch.controls.rcvdBy_hdr_by_batch.setValue(this.userIDLogin)
    this.enabledUnitCode();
    this.loadDataFromDictionary()
    this.ItemMasterUnitArray_convfactor;
    //this.getUser()
    this.getDateTimeNow()
    this.addInventoryInFormGroup.controls.trxNo_hdr.setValue("*********************************");
    this.addInventoryInFormGroupByBatch.controls.trxNo_hdr_by_batch.setValue("*********************************");
    this.userIDLogin = this.cookieService.get('userId');

    console.log(this.userIDLogin)
  }

  async CreateAutoGeneratedID() {
    await this.inv_in_service.getTrxNumFunction().toPromise().then((result) => {
      this.trxNumFunction = result;

      let trxNum = this.trxNumFunction.split('|');
      let type = trxNum[0];
      let year = trxNum[1];
      let convertYear = this.datepipe.transform(new Date(), year.toLowerCase());
      let num = trxNum[2];

      this.addInventoryInFormGroup.controls.trxNo_hdr.setValue(type + convertYear + num);
     

      
    });   
  }

    public getDateTimeNow() {
      let dt = new Date();
      let DayMonthYear = dt.toISOString().slice(0, 10)
      let TimeNow = dt.toTimeString().slice(0, 5)
      let CompleteDate = DayMonthYear + "T" + TimeNow

    this.addInventoryInFormGroup.controls.trxDate_hdr.setValue(CompleteDate);
    this.addInventoryInFormGroup.controls.rcvdDate_hdr.setValue(CompleteDate);
      this.addInventoryInFormGroup.controls.expDate_dtl.setValue(CompleteDate);

      this.addInventoryInFormGroupByBatch.controls.trxDate_hdr_by_batch.setValue(CompleteDate);
  }
  public getUser() {
   
    this.auth.getCurrentUser().then(userdata => {
      this.user = userdata.userName;
      this.addInventoryInFormGroupByBatch.controls.rcvdBy_hdr_by_batch.setValue(this.user)
    })
  }
  public CreateForm() {
    this.addInventoryInFormGroup = this.builder.group({
      trxNo_hdr: [''],
      trxDate_hdr: [''],
      rcvdDate_hdr: [''],
      rcvdBy_hdr: [''],
      PONo_hdr: [''],
      invoiceNo_hdr: [''],
      refNo_hdr: [''],
      docNo_hdr: [''],
      supplier_hdr: [''],
      remarks_hdr: [''],

      itemMaster_dtl: [''],
      itemUnit_dtl: [''],
      quantity_dtl: [''],
      lotno_dtl: [''],
      expDate_dtl: [''],
      NotApplicable: [''],
      count_dtl: [''],
      remainingcount_dtl: [''],

     cnvfactor: ['']
    })
    this.addInventoryInFormGroupByBatch = this.builder.group({
      trxNo_hdr_by_batch: [''],
      trxDate_hdr_by_batch: [''],
      rcvdBy_hdr_by_batch: [''],
    })
  }
   async insertInventoryInTrx() {
     let errormessage = "Error";

      console.log("testing")
      let rcvddate = this.addInventoryInFormGroup.controls.rcvdDate_hdr.value;
      let rcvdby = this.addInventoryInFormGroup.controls.rcvdBy_hdr.value
      let ponumber = this.addInventoryInFormGroup.controls.PONo_hdr.value;
      let invcno = this.addInventoryInFormGroup.controls.invoiceNo_hdr.value;
      let refno = this.userIDLogin;
      let docno = this.addInventoryInFormGroup.controls.docNo_hdr.value;
      let sup
      try {
        sup = document.getElementById(this.addInventoryInFormGroup.controls.supplier_hdr.value).innerText;
      } catch{

      }
      let remarks = this.addInventoryInFormGroup.controls.remarks_hdr.value;

      let itemid = this.itemmasterId_doc;
      let unit = this.itemmasterUnit_doc;
      let qty = this.addInventoryInFormGroup.controls.quantity_dtl.value;
     let lotno = this.addInventoryInFormGroup.controls.lotno_dtl.value;

     let expdate = this.addInventoryInFormGroup.controls.expDate_dtl.value;
     if (this.addInventoryInFormGroup.controls.NotApplicable.value) {
      expdate = null
     }

      
      let count = this.addInventoryInFormGroup.controls.count_dtl.value;
      let remainingcount = this.addInventoryInFormGroup.controls.remainingcount_dtl.value;

     
      this.iinv_in_trx_hdr.receivedDate = rcvddate
      this.iinv_in_trx_hdr.receivedBy = rcvdby
      this.iinv_in_trx_hdr.poNumber = ponumber
      this.iinv_in_trx_hdr.invoiceNo = invcno
      this.iinv_in_trx_hdr.referenceNo = refno
      this.iinv_in_trx_hdr.documnetNo = docno
      this.iinv_in_trx_hdr.supplier = sup
      this.iinv_in_trx_hdr.remarks = remarks

      
      this.iinv_in_trx_dtl.itemID = itemid
      this.iinv_in_trx_dtl.unit = unit
      this.iinv_in_trx_dtl.quantity = qty
      this.iinv_in_trx_dtl.lotNumber = lotno
      this.iinv_in_trx_dtl.expirationDate = expdate
      this.iinv_in_trx_dtl.count = count
      this.iinv_in_trx_dtl.remainigCount = remainingcount

     if (ponumber == '' || invcno == '' || rcvdby == '' || lotno == '' || rcvdby == '' || itemid == '' || itemid == null || unit == null || qty == null ||
       ponumber == null || invcno == null || rcvdby == null || lotno == null || rcvdby == null) {
        alert("please input on the fileds with red (*)")
      } else {

        await this.CreateAutoGeneratedID()
        let trxnohdr = this.addInventoryInFormGroup.controls.trxNo_hdr.value;
        let trxnodtl = this.addInventoryInFormGroup.controls.trxNo_hdr.value;
        this.iinv_in_trx_hdr.transactionNo = trxnohdr
        this.iinv_in_trx_dtl.transactionNo = trxnodtl

        this.inv_in_service.insertInventoryInTrxHeader(this.iinv_in_trx_hdr).subscribe(data => {

          this.toastr.success("Data Saved", "Saved");
        },
          error => {
            errormessage = error.error;
            this.toastr.error(errormessage, "Error");
          });


        this.inv_in_service.insertInventoryInTrxDetails(this.iinv_in_trx_dtl).subscribe(data => {
          this.toastr.success("Data Saved", "Saved");
        },
          error => {
            errormessage = error.error;
            this.toastr.error(errormessage, "Error");
          })
      }
   
  }

  
  public loadDataFromDictionary()
  {
    this.inv_in_service.getItemMasterData().subscribe((itemmaster)=> this.Iitemmaster= itemmaster)
    this.inv_in_service.getSupplierData().subscribe((supplier) => this.Isupplier = supplier)
    
  }

  public onSelectedItemMaster(value: string) :void {
    //this.isReadonly_UC = false;
    try {

      this.itemmasterId_doc = document.getElementById(this.addInventoryInFormGroup.controls.itemMaster_dtl.value).innerText;
      value = this.itemmasterId_doc;

      this.inv_in_service.getItemasterUnit(value).subscribe((itemmaster) => this.ItemMasterUnitArray = itemmaster);
      this.enabledUnitCode()
      this.enabledLookUpButtonItemUnit()
    }
    catch{
    }
  }


  public onSelectCoversionFactor(itemMasterId: string, itemMasterUnitId: string) {

    try {
      this.itemmasterUnit_doc = document.getElementById(this.addInventoryInFormGroup.controls.itemUnit_dtl.value).innerText;

      itemMasterId = this.itemmasterId_doc;
      itemMasterUnitId = this.itemmasterUnit_doc;


      this.inv_in_service.getItemasterUnitConversionFactor(itemMasterId, itemMasterUnitId).subscribe((itemmasterunit) => {
        this.ItemMasterUnitArray_convfactor = itemmasterunit;

        for (let i of this.ItemMasterUnitArray_convfactor) {
          this.conversionFactor = parseInt(i.itemMasterUnitConversion);
        }
      });
      this.enabledQuantity()
    }
    catch{
    }
  }
  public onTextChangedQuantityInput() {

    try {
      this.iinv_in_trx_dtl.quantity = this.addInventoryInFormGroup.controls.quantity_dtl.value;
      let computefactor = this.iinv_in_trx_dtl.quantity * this.conversionFactor;

      this.addInventoryInFormGroup.controls.count_dtl.setValue(this.iinv_in_trx_dtl.quantity);
      this.addInventoryInFormGroup.controls.remainingcount_dtl.setValue(computefactor);
    }
    catch{
    }
  }

  public resetScreen() {
    this.loadDataFromDictionary()
    this.addInventoryInFormGroup.reset();
    this.getDateTimeNow();
    this.addInventoryInFormGroup.controls.trxNo_hdr.setValue("*********************************");
    this.getUser();
    this.isReadonly_QTY = true;
    this.isReadonly_UC = true;
    this.isReadonly_LookUp_Btn_ItemUnit=true
    this.conversionFactor = null;
    this.itemmasterId_doc = null;
    this.itemmasterUnit_doc = null;
    this.itemmasteunitSelectList = null;
    this.itemasterSelectList = null;
    this.supplierSelectList = null;
  }
  public enabledUnitCode() {
    if (this.addInventoryInFormGroup.controls.itemMaster_dtl.value == '') {
      this.isReadonly_UC = true;
      this.isReadonly_QTY = true;
      this.isReadonly_LookUp_Btn_ItemUnit = true;
      this.itemmasterUnit_doc = null;
      this.addInventoryInFormGroup.controls.itemUnit_dtl.reset();
      this.addInventoryInFormGroup.controls.quantity_dtl.reset();
      this.addInventoryInFormGroup.controls.count_dtl.reset();
      this.addInventoryInFormGroup.controls.remainingcount_dtl.reset();
    } else {
      this.isReadonly_UC = false;
      this.isReadonly_LookUp_Btn_ItemUnit = false;
    }
      
  }
  public enabledQuantity() {
    if (this.addInventoryInFormGroup.controls.itemUnit_dtl.value == '') {
      this.isReadonly_QTY = true;
      this.addInventoryInFormGroup.controls.quantity_dtl.reset();
      this.addInventoryInFormGroup.controls.count_dtl.reset();
      this.addInventoryInFormGroup.controls.remainingcount_dtl.reset();
    } else {
      this.isReadonly_QTY = false;
    }
  }

  supplierSelectLookUp(supplierId: string) {
    console.log(supplierId);

    this.inv_in_service.getSupplierData().subscribe((supplier) => {
      this.supplierSelectList = supplier;

      for (let sup of this.supplierSelectList) {
        let suppId = sup.id;
        if (supplierId == suppId) {
          this.addInventoryInFormGroup.controls.supplier_hdr.setValue(sup.name)

        } else {

        }
      }
    })
  }

  itemMasterSelectLookUp(value: string) {
    try {

      this.inv_in_service.getItemMasterData().subscribe((itemmaster) => {
      this.itemasterSelectList = itemmaster;
      
        for (let im of this.itemasterSelectList) {
          let imID = im.id

          if (value == imID) {
            this.addInventoryInFormGroup.controls.itemMaster_dtl.setValue(im.itemName)

            this.itemmasterId_doc = document.getElementById(this.addInventoryInFormGroup.controls.itemMaster_dtl.value).innerText;
            value = this.itemmasterId_doc;

            this.inv_in_service.getItemasterUnit(value).subscribe((itemmaster) => this.ItemMasterUnitArray = itemmaster);
            this.enabledUnitCode()
          }
          else {

          }
        }
      })
    }
    catch{
    }
  }
  itemMasterUnitSelectLookup(itemMasterUnitId: string) {

    try {


      let itemMasterId = document.getElementById(this.addInventoryInFormGroup.controls.itemMaster_dtl.value).innerText
      this.inv_in_service.getItemasterUnit(itemMasterId).subscribe((itemmaster) => {
      this.itemmasteunitSelectList = itemmaster;

        for (let imu of this.itemmasteunitSelectList) {
          if (itemMasterUnitId == imu.unitCode) {
            this.addInventoryInFormGroup.controls.itemUnit_dtl.setValue(imu.unitDescription)

            this.itemmasterUnit_doc = document.getElementById(this.addInventoryInFormGroup.controls.itemUnit_dtl.value).innerText;

            itemMasterUnitId = this.itemmasterUnit_doc;

            this.inv_in_service.getItemasterUnitConversionFactor(itemMasterId, itemMasterUnitId).subscribe((itemmasterunit) => {
              this.ItemMasterUnitArray_convfactor = itemmasterunit;

              for (let i of this.ItemMasterUnitArray_convfactor) {
                this.conversionFactor = parseInt(i.itemMasterUnitConversion);
              }
            });
            this.enabledQuantity()

          }
        }
      });
    }
    catch{
    }
  }
  enabledLookUpButtonItemUnit() {
    if (this.addInventoryInFormGroup.controls.itemMaster_dtl.value == '') {
      this.isReadonly_LookUp_Btn_ItemUnit = true
    } else {
      this.isReadonly_LookUp_Btn_ItemUnit = false
    }
  }
  file: File;
 public incomingfile(event) {
    this.file = event.target.files[0];
    this.GetData()
  }
  public GetData() {
    let fileReader = new FileReader();
    fileReader.onload = (e) => {
      this.arrayBuffer = fileReader.result;
      let data = new Uint8Array(this.arrayBuffer);
      let arr = new Array();
      for (let i = 0; i != data.length; ++i) arr[i] = String.fromCharCode(data[i]);
      let bstr = arr.join("");
      let workbook = XLSX.read(bstr, { type: "binary" });
      let first_sheet_name = workbook.SheetNames[0];
      let worksheet = XLSX.utils.sheet_to_json(workbook.Sheets[first_sheet_name]);

      Array.from(worksheet).forEach((arr) => {
        this.excelUpload.push({
          SpecimenId: arr["SpecimenId"], LastName: arr["LastName"], FirstName: arr["FirstName"], MiddleName: arr["MiddleName"]
        })

  
      })


    }
    fileReader.readAsArrayBuffer(this.file);
  }
 public Upload() {
   Array.from(this.excelUpload).forEach((arr) => {
     console.log(arr.SpecimenId + " " + arr.LastName + " " + arr.FirstName + " "  + arr.MiddleName)
   })
  }
}
export interface ExcelUploadTable {
  SpecimenId: string;
  LastName: string;
  FirstName: string;
  MiddleName: string;
}
