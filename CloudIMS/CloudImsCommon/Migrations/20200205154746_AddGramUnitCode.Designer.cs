// <auto-generated />
using System;
using CloudImsCommon.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CloudImsCommon.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200205154746_AddGramUnitCode")]
    partial class AddGramUnitCode
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085");

            modelBuilder.Entity("CloudImsCommon.Models.Clinician", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("clin_id")
                        .HasMaxLength(20);

                    b.Property<string>("Email")
                        .HasColumnName("clin_email")
                        .HasMaxLength(100);

                    b.Property<string>("MobileNo")
                        .HasColumnName("clin_mobile_no")
                        .HasMaxLength(40);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("clin_name")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("IDX_NAME");

                    b.ToTable("clinician");

                    b.HasData(
                        new { ID = "FUR", Email = "reguis.florante@gmail.com", MobileNo = "09171447107", Name = "FLORANTE U. REGUIS, MD" },
                        new { ID = "FGC", Email = "cuizonfg@gmail.com", MobileNo = "09171447170", Name = "FROILAN G. CUIZON, MD" }
                    );
                });

            modelBuilder.Entity("CloudImsCommon.Models.Company", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasMaxLength(3);

                    b.Property<string>("CompanyID")
                        .IsRequired()
                        .HasColumnName("company_id")
                        .HasMaxLength(10);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnName("company_name")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.ToTable("company");

                    b.HasData(
                        new { ID = "000", CompanyID = "NEW", CompanyName = "NEW CLOUD CMS CUSTOMER" }
                    );
                });

            modelBuilder.Entity("CloudImsCommon.Models.EventTable", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("et_code")
                        .HasMaxLength(20);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("et_description")
                        .HasMaxLength(100);

                    b.Property<string>("Remarks")
                        .HasColumnName("et_remarks")
                        .HasMaxLength(500);

                    b.HasKey("Code");

                    b.ToTable("event_table");

                    b.HasData(
                        new { Code = "TRX_ADD", Description = "Add transaction" },
                        new { Code = "TRX_UPDATE", Description = "Update transaction" },
                        new { Code = "TRX_VOID", Description = "Void transaction" },
                        new { Code = "TRX_POST", Description = "Post transaction" },
                        new { Code = "TRX_PAY", Description = "Pay transaction" },
                        new { Code = "TRX_UNDO_PAY", Description = "Undo pay transaction" },
                        new { Code = "TRX_DELETE", Description = "Delete transaction" }
                    );
                });

            modelBuilder.Entity("CloudImsCommon.Models.Item", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("im_code")
                        .HasMaxLength(10);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnName("im_category")
                        .HasMaxLength(1);

                    b.Property<string>("CostCenter")
                        .IsRequired()
                        .HasColumnName("im_cost_center")
                        .HasMaxLength(10);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("im_created_by")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("im_created_on");

                    b.Property<string>("HostCode")
                        .IsRequired()
                        .HasColumnName("im_host_code")
                        .HasMaxLength(20);

                    b.Property<byte>("IsActive")
                        .HasColumnName("im_active")
                        .HasColumnType("TINYINT");

                    b.Property<byte>("IsEditablePrice")
                        .HasColumnName("im_editable_price")
                        .HasColumnType("TINYINT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("im_name")
                        .HasMaxLength(100);

                    b.Property<string>("Remarks")
                        .HasColumnName("im_remarks")
                        .HasMaxLength(500);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("im_type")
                        .HasMaxLength(3);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("im_updated_by")
                        .HasMaxLength(20);

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("im_updated_on");

                    b.HasKey("Code");

                    b.HasIndex("Category")
                        .HasName("IDX_CATEGORY");

                    b.HasIndex("Name")
                        .HasName("IDX_NAME");

                    b.ToTable("item_master");

                    b.HasData(
                        new { Code = "CBC", Category = "S", CostCenter = "LAB", CreatedBy = "SYSAD", CreatedOn = new DateTime(2020, 2, 5, 23, 47, 45, 503, DateTimeKind.Local), HostCode = "CBC", IsActive = (byte)1, IsEditablePrice = (byte)0, Name = "COMPLETE BLOOD COUNT", Remarks = "", Type = "T", UpdatedBy = "SYSAD", UpdatedOn = new DateTime(2020, 2, 5, 23, 47, 45, 503, DateTimeKind.Local) },
                        new { Code = "FBS", Category = "S", CostCenter = "LAB", CreatedBy = "SYSAD", CreatedOn = new DateTime(2020, 2, 5, 23, 47, 45, 503, DateTimeKind.Local), HostCode = "FBS", IsActive = (byte)1, IsEditablePrice = (byte)0, Name = "FASTING BLOOD SUGAR", Remarks = "", Type = "T", UpdatedBy = "SYSAD", UpdatedOn = new DateTime(2020, 2, 5, 23, 47, 45, 503, DateTimeKind.Local) },
                        new { Code = "PRE-EMP-1", Category = "P", CostCenter = "0", CreatedBy = "SYSAD", CreatedOn = new DateTime(2020, 2, 5, 23, 47, 45, 503, DateTimeKind.Local), HostCode = "PRE-EMP1", IsActive = (byte)1, IsEditablePrice = (byte)0, Name = "PRE-EMPLOYMENT PACKAGE #1", Remarks = "", Type = "0", UpdatedBy = "SYSAD", UpdatedOn = new DateTime(2020, 2, 5, 23, 47, 45, 503, DateTimeKind.Local) },
                        new { Code = "URINA", Category = "S", CostCenter = "LAB", CreatedBy = "SYSAD", CreatedOn = new DateTime(2020, 2, 5, 23, 47, 45, 503, DateTimeKind.Local), HostCode = "URINA", IsActive = (byte)1, IsEditablePrice = (byte)0, Name = "URINALYSIS", Remarks = "", Type = "T", UpdatedBy = "SYSAD", UpdatedOn = new DateTime(2020, 2, 5, 23, 47, 45, 503, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("CloudImsCommon.Models.ProgramFolder", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pf_folder_id")
                        .HasMaxLength(10);

                    b.Property<string>("Icon")
                        .HasColumnName("pf_icon")
                        .HasMaxLength(10);

                    b.Property<string>("IconProvider")
                        .HasColumnName("pf_icon_provider")
                        .HasMaxLength(20);

                    b.Property<string>("IconType")
                        .HasColumnName("pf_icon_type")
                        .HasMaxLength(10);

                    b.Property<string>("ModuleID")
                        .IsRequired()
                        .HasColumnName("pf_module")
                        .HasMaxLength(10);

                    b.Property<string>("ModuleRouteAttribute")
                        .IsRequired()
                        .HasColumnName("pf_module_route")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("pf_folder_name")
                        .HasMaxLength(100);

                    b.Property<string>("ProgramRootID")
                        .IsRequired()
                        .HasColumnName("pf_root")
                        .HasMaxLength(10);

                    b.Property<string>("RouteAttribute")
                        .IsRequired()
                        .HasColumnName("pf_folder_route")
                        .HasMaxLength(25);

                    b.Property<int>("SequenceNo")
                        .HasColumnName("pf_seqno");

                    b.HasKey("ID");

                    b.HasIndex("ProgramRootID");

                    b.ToTable("program_folder");

                    b.HasData(
                        new { ID = "GENSM", ModuleID = "GEN", ModuleRouteAttribute = "gen", Name = "Sample Management", ProgramRootID = "PRG", RouteAttribute = "sample-management", SequenceNo = 10 },
                        new { ID = "GENRM", ModuleID = "GEN", ModuleRouteAttribute = "gen", Name = "Result Management", ProgramRootID = "PRG", RouteAttribute = "result-management", SequenceNo = 10 },
                        new { ID = "BBSM", ModuleID = "BB", ModuleRouteAttribute = "gen", Name = "Sample Management", ProgramRootID = "PRG", RouteAttribute = "sample-management", SequenceNo = 10 },
                        new { ID = "BBRM", ModuleID = "BB", ModuleRouteAttribute = "bb", Name = "Result Management", ProgramRootID = "PRG", RouteAttribute = "result-management", SequenceNo = 10 }
                    );
                });

            modelBuilder.Entity("CloudImsCommon.Models.ProgramMenu", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pm_id")
                        .HasMaxLength(20);

                    b.Property<string>("ActionRouteAttribute")
                        .IsRequired()
                        .HasColumnName("pm_action_route")
                        .HasMaxLength(25);

                    b.Property<string>("ControllerRouteAttribute")
                        .IsRequired()
                        .HasColumnName("pm_controller_route")
                        .HasMaxLength(25);

                    b.Property<string>("FolderRouteAttribute")
                        .IsRequired()
                        .HasColumnName("pm_folder_route")
                        .HasMaxLength(25);

                    b.Property<string>("IconName")
                        .HasColumnName("pm_icon_name")
                        .HasMaxLength(100);

                    b.Property<string>("IconProvider")
                        .HasColumnName("pm_icon_provider")
                        .HasMaxLength(20);

                    b.Property<string>("IconType")
                        .HasColumnName("pm_icon_type")
                        .HasMaxLength(10);

                    b.Property<string>("ModuleRouteAttribute")
                        .IsRequired()
                        .HasColumnName("pm_module_route")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("pm_name")
                        .HasMaxLength(100);

                    b.Property<string>("ProgramFolderID")
                        .IsRequired()
                        .HasColumnName("pm_folder")
                        .HasMaxLength(10);

                    b.Property<int>("SequenceNo")
                        .HasColumnName("pm_seqno");

                    b.HasKey("ID");

                    b.HasIndex("ProgramFolderID");

                    b.ToTable("program_menu");

                    b.HasData(
                        new { ID = "GENSM_SAMREC", ActionRouteAttribute = "index", ControllerRouteAttribute = "sample-reception", FolderRouteAttribute = "sample-management", ModuleRouteAttribute = "gen", Name = "Sample Reception", ProgramFolderID = "GENSM", SequenceNo = 10 },
                        new { ID = "GENSM_SAMCHK", ActionRouteAttribute = "index", ControllerRouteAttribute = "sample-checkin", FolderRouteAttribute = "sample-management", ModuleRouteAttribute = "gen", Name = "Sample Check-In", ProgramFolderID = "GENSM", SequenceNo = 20 },
                        new { ID = "GENSM_REJSAM", ActionRouteAttribute = "index", ControllerRouteAttribute = "reject -sample", FolderRouteAttribute = "sample-management", ModuleRouteAttribute = "gen", Name = "Reject Sample", ProgramFolderID = "GENSM", SequenceNo = 30 },
                        new { ID = "GENSM_ADDELO", ActionRouteAttribute = "index", ControllerRouteAttribute = "add-delete-lab-order", FolderRouteAttribute = "sample-management", ModuleRouteAttribute = "gen", Name = "Add/Delete Lab Order", ProgramFolderID = "GENSM", SequenceNo = 40 },
                        new { ID = "GENSM_DELLN", ActionRouteAttribute = "index", ControllerRouteAttribute = "delete-lab-number", FolderRouteAttribute = "sample-management", ModuleRouteAttribute = "gen", Name = "Delete Lab Number", ProgramFolderID = "GENSM", SequenceNo = 50 },
                        new { ID = "GENRM_RESENT", ActionRouteAttribute = "index", ControllerRouteAttribute = "result-entry", FolderRouteAttribute = "result-management", ModuleRouteAttribute = "gen", Name = "Result Entry", ProgramFolderID = "GENRM", SequenceNo = 10 },
                        new { ID = "GENRM_FPATREC", ActionRouteAttribute = "index", ControllerRouteAttribute = "find-patient-record", FolderRouteAttribute = "result-management", ModuleRouteAttribute = "gen", Name = "Find Patient Record", ProgramFolderID = "GENRM", SequenceNo = 20 },
                        new { ID = "BBSM_SAMREC", ActionRouteAttribute = "index", ControllerRouteAttribute = "sample-reception", FolderRouteAttribute = "sample-management", ModuleRouteAttribute = "gen", Name = "Sample Reception", ProgramFolderID = "BBSM", SequenceNo = 10 },
                        new { ID = "BBSM_SAMCHK", ActionRouteAttribute = "index", ControllerRouteAttribute = "sample-checkin", FolderRouteAttribute = "sample-management", ModuleRouteAttribute = "gen", Name = "Sample Check-In", ProgramFolderID = "BBSM", SequenceNo = 20 },
                        new { ID = "BBSM_REJSAM", ActionRouteAttribute = "index", ControllerRouteAttribute = "reject -sample", FolderRouteAttribute = "sample-management", ModuleRouteAttribute = "gen", Name = "Reject Sample", ProgramFolderID = "BBSM", SequenceNo = 30 },
                        new { ID = "BBSM_ADDELO", ActionRouteAttribute = "index", ControllerRouteAttribute = "add-delete-lab-order", FolderRouteAttribute = "sample-management", ModuleRouteAttribute = "gen", Name = "Add/Delete Lab Order", ProgramFolderID = "BBSM", SequenceNo = 40 },
                        new { ID = "BBSM_DELLN", ActionRouteAttribute = "index", ControllerRouteAttribute = "delete-lab-number", FolderRouteAttribute = "sample-management", ModuleRouteAttribute = "gen", Name = "Delete Lab Number", ProgramFolderID = "BBSM", SequenceNo = 50 },
                        new { ID = "BBRM_RESENT", ActionRouteAttribute = "index", ControllerRouteAttribute = "result-entry", FolderRouteAttribute = "result-management", ModuleRouteAttribute = "bb", Name = "Result Entry", ProgramFolderID = "BBRM", SequenceNo = 10 },
                        new { ID = "BBRM_FPATREC", ActionRouteAttribute = "index", ControllerRouteAttribute = "find-patient-record", FolderRouteAttribute = "result-management", ModuleRouteAttribute = "gen", Name = "Find Patient Record", ProgramFolderID = "BBRM", SequenceNo = 20 }
                    );
                });

            modelBuilder.Entity("CloudImsCommon.Models.ProgramRoot", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pr_id")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("pr_name")
                        .HasMaxLength(100);

                    b.Property<int>("SequenceNo")
                        .HasColumnName("pr_seqno");

                    b.HasKey("ID");

                    b.ToTable("program_root");

                    b.HasData(
                        new { ID = "PRG", Name = "Program", SequenceNo = 100 },
                        new { ID = "SM", Name = "System Management", SequenceNo = 200 }
                    );
                });

            modelBuilder.Entity("CloudImsCommon.Models.UnitCode", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("uc_code")
                        .HasMaxLength(3);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("uc_description")
                        .HasMaxLength(20);

                    b.Property<string>("ShortDescription")
                        .HasColumnName("uc_short_description")
                        .HasMaxLength(10);

                    b.HasKey("Code");

                    b.HasIndex("Description")
                        .HasName("IDX_DESCRIPTION");

                    b.ToTable("unit_code");

                    b.HasData(
                        new { Code = "100", Description = "Meter" },
                        new { Code = "101", Description = "Kilo" },
                        new { Code = "102", Description = "Gram" }
                    );
                });

            modelBuilder.Entity("CloudImsCommon.Models.UserAccount", b =>
                {
                    b.Property<string>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ua_user_id")
                        .HasMaxLength(20);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("im_created_by")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("im_created_on");

                    b.Property<byte>("IsActive")
                        .HasColumnName("ua_is_active")
                        .HasColumnType("TINYINT");

                    b.Property<byte>("IsMbUser")
                        .HasColumnName("ua_is_mb_user")
                        .HasColumnType("TINYINT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("ua_password")
                        .HasMaxLength(100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("im_updated_by")
                        .HasMaxLength(20);

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("im_updated_on");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("ua_user_name")
                        .HasMaxLength(100);

                    b.HasKey("UserID");

                    b.ToTable("user_account");

                    b.HasData(
                        new { UserID = "SYSAD", CreatedBy = "SYSTEM", CreatedOn = new DateTime(2020, 2, 5, 23, 47, 45, 479, DateTimeKind.Local), IsActive = (byte)1, IsMbUser = (byte)1, Password = ".00000", UpdatedBy = "SYSTEM", UpdatedOn = new DateTime(2020, 2, 5, 23, 47, 45, 481, DateTimeKind.Local), UserName = "SYSTEM ADMINISTRATOR" },
                        new { UserID = "FUR", CreatedBy = "SYSTEM", CreatedOn = new DateTime(2020, 2, 5, 23, 47, 45, 481, DateTimeKind.Local), IsActive = (byte)1, IsMbUser = (byte)1, Password = ".00000", UpdatedBy = "SYSTEM", UpdatedOn = new DateTime(2020, 2, 5, 23, 47, 45, 481, DateTimeKind.Local), UserName = "FLORANTE U. REGUIS" },
                        new { UserID = "FGC", CreatedBy = "SYSTEM", CreatedOn = new DateTime(2020, 2, 5, 23, 47, 45, 481, DateTimeKind.Local), IsActive = (byte)1, IsMbUser = (byte)1, Password = ".00000", UpdatedBy = "SYSTEM", UpdatedOn = new DateTime(2020, 2, 5, 23, 47, 45, 481, DateTimeKind.Local), UserName = "FROILAN G. CUIZON" },
                        new { UserID = "MLS", CreatedBy = "SYSTEM", CreatedOn = new DateTime(2020, 2, 5, 23, 47, 45, 481, DateTimeKind.Local), IsActive = (byte)1, IsMbUser = (byte)1, Password = ".00000", UpdatedBy = "SYSTEM", UpdatedOn = new DateTime(2020, 2, 5, 23, 47, 45, 481, DateTimeKind.Local), UserName = "MARKWIN L. SORIANO" }
                    );
                });

            modelBuilder.Entity("CloudImsCommon.Models.UserAccountGroup", b =>
                {
                    b.Property<string>("UserAccountID")
                        .HasMaxLength(20);

                    b.Property<string>("UserGroupID")
                        .HasMaxLength(20);

                    b.HasKey("UserAccountID", "UserGroupID");

                    b.HasIndex("UserGroupID");

                    b.ToTable("user_account_group");

                    b.HasData(
                        new { UserAccountID = "SYSAD", UserGroupID = "GENADMIN" },
                        new { UserAccountID = "SYSAD", UserGroupID = "BBADMIN" }
                    );
                });

            modelBuilder.Entity("CloudImsCommon.Models.UserGroup", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ug_id")
                        .HasMaxLength(20);

                    b.Property<string>("ModuleID")
                        .IsRequired()
                        .HasColumnName("ug_module")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("ug_name")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.ToTable("user_group");

                    b.HasData(
                        new { ID = "GENADMIN", ModuleID = "GEN", Name = "SYSTEM ADMINISTRATORS (GENLAB)" },
                        new { ID = "BBADMIN", ModuleID = "BB", Name = "SYSTEM ADMINISTRATORS (BLOOD BANK)" }
                    );
                });

            modelBuilder.Entity("CloudImsCommon.Models.UserGroupProgram", b =>
                {
                    b.Property<string>("UserGroupID")
                        .HasColumnName("ugp_user_group")
                        .HasMaxLength(20);

                    b.Property<string>("ProgramMenuID")
                        .HasColumnName("ugp_program_id")
                        .HasMaxLength(20);

                    b.HasKey("UserGroupID", "ProgramMenuID");

                    b.HasAlternateKey("ProgramMenuID", "UserGroupID");

                    b.ToTable("user_group_programs");

                    b.HasData(
                        new { UserGroupID = "GENADMIN", ProgramMenuID = "BBSM_SAMREC" },
                        new { UserGroupID = "GENADMIN", ProgramMenuID = "BBSM_SAMCHK" },
                        new { UserGroupID = "GENADMIN", ProgramMenuID = "BBSM_REJSAM" },
                        new { UserGroupID = "GENADMIN", ProgramMenuID = "BBSM_ADDELO" },
                        new { UserGroupID = "GENADMIN", ProgramMenuID = "BBSM_DELLN" },
                        new { UserGroupID = "GENADMIN", ProgramMenuID = "BBRM_RESENT" },
                        new { UserGroupID = "GENADMIN", ProgramMenuID = "BBRM_FPATREC" },
                        new { UserGroupID = "BBADMIN", ProgramMenuID = "BBSM_SAMREC" },
                        new { UserGroupID = "BBADMIN", ProgramMenuID = "BBSM_SAMCHK" },
                        new { UserGroupID = "BBADMIN", ProgramMenuID = "BBSM_REJSAM" },
                        new { UserGroupID = "BBADMIN", ProgramMenuID = "BBSM_ADDELO" },
                        new { UserGroupID = "BBADMIN", ProgramMenuID = "BBSM_DELLN" },
                        new { UserGroupID = "BBADMIN", ProgramMenuID = "BBRM_RESENT" },
                        new { UserGroupID = "BBADMIN", ProgramMenuID = "BBRM_FPATREC" }
                    );
                });

            modelBuilder.Entity("CloudImsCommon.Models.ProgramFolder", b =>
                {
                    b.HasOne("CloudImsCommon.Models.ProgramRoot", "ProgramRoot")
                        .WithMany()
                        .HasForeignKey("ProgramRootID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CloudImsCommon.Models.ProgramMenu", b =>
                {
                    b.HasOne("CloudImsCommon.Models.ProgramFolder", "ProgramFolder")
                        .WithMany()
                        .HasForeignKey("ProgramFolderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CloudImsCommon.Models.UserAccountGroup", b =>
                {
                    b.HasOne("CloudImsCommon.Models.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserAccountID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudImsCommon.Models.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CloudImsCommon.Models.UserGroupProgram", b =>
                {
                    b.HasOne("CloudImsCommon.Models.ProgramMenu", "ProgramMenu")
                        .WithMany()
                        .HasForeignKey("ProgramMenuID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudImsCommon.Models.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
